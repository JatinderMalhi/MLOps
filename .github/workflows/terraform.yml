name: 'Terraform'

on:
  push:
    branches: [ "main" ]
    paths:
      - 'terraform/**'

permissions:
  contents: read
  id-token: 'write'

env:
  PROJECT_ID: ${{vars.PROJECT_ID}}
  REGION: ${{vars.REGION}}
  SERVICE_ACCOUNT_EMAIL: ${{vars.SERVICE_ACCOUNT_EMAIL}}
  PROJECT_NUMBER: ${{vars.PROJECT_NUMBER}}
  WORKLOAD_PROVIDER: ${{vars.WORKLOAD_PROVIDER}}
  POOL_ID: ${{vars.POOL_ID}}
  ORG_ID: ${{vars.ORG_ID}}
  REPO: ${{vars.REPO}}
  REMOTE_URI: ${{vars.REMOTE_URI}}
  SECRET_ID: ${{vars.SECRET_ID}}
  INSTALLATION_ID: ${{vars.INSTALLATION_ID}}
  META_API_SECRET_ID: ${{vars.META_API_SECRET_ID}}


jobs:
  terraform_plan:
    name: 'Terraform'
    runs-on: ubuntu-latest


    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    - id: auth
      uses: google-github-actions/auth@v2.0.0  
      with:
        workload_identity_provider: ${{env.WORKLOAD_PROVIDER}}
        service_account: ${{env.SERVICE_ACCOUNT_EMAIL}}
        create_credentials_file: true
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      # with:
      #   cli_config_credentials_token: 

    - name: Terraform Init
      run: terraform init
      working-directory: terraform

    - name: Terraform Validate
      run: terraform validate -no-color
      working-directory: terraform
      
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false -var="project_id=${{env.PROJECT_ID}}" -var="region=${{env.REGION}}" -var="project_number=${{env.PROJECT_NUMBER}}" -var="service_account_id=${{env.SERVICE_ACCOUNT_EMAIL}}" -var="org_id=${{env.ORG_ID}}" -var="pool_id=${{env.POOL_ID}}" -var="repo=${{env.REPO}}" -var "cloud_build_github_pat=${{ secrets.CLOUD_BUILD_GITHUB_PAT }}" -var "secret_id=${{env.SECRET_ID}}" -var "installation_id=${{env.INSTALLATION_ID}}" -var "remote_uri=${{env.REMOTE_URI}}" -var "meta_api_secret_id=${{env.META_API_SECRET_ID}}" -var "meta_api_token=${{secrets.META_API_TOKEN}}"
      working-directory: terraform
    

  terraform_apply:
    name: 'Terraform apply'
    needs: [terraform_plan]
    runs-on: ubuntu-latest
    
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    - id: auth
      uses: google-github-actions/auth@v2.0.0  
      with:
        workload_identity_provider: ${{env.WORKLOAD_PROVIDER}}
        service_account: ${{env.SERVICE_ACCOUNT_EMAIL}}
        create_credentials_file: true
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      # with:
      #   cli_config_credentials_token: 

    - name: Terraform Init
      run: terraform init
      working-directory: terraform

    # Generates an execution plan for Terraform
    - name: Terraform validate
      run: terraform validate -no-color
      working-directory: terraform

    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false -var="project_id=${{env.PROJECT_ID}}" -var="region=${{env.REGION}}" -var="project_number=${{env.PROJECT_NUMBER}}" -var="service_account_id=${{env.SERVICE_ACCOUNT_EMAIL}}" -var="org_id=${{env.ORG_ID}}" -var="pool_id=${{env.POOL_ID}}" -var="repo=${{env.REPO}}" -var "cloud_build_github_pat=${{ secrets.CLOUD_BUILD_GITHUB_PAT }}" -var "secret_id=${{env.SECRET_ID}}" -var "installation_id=${{env.INSTALLATION_ID}}" -var "remote_uri=${{env.REMOTE_URI}}" -var "meta_api_secret_id=${{env.META_API_SECRET_ID}}" -var "meta_api_token=${{secrets.META_API_TOKEN}}"
      working-directory: terraform
